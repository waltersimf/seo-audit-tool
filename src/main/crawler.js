// ============================================
// CRAWLER.JS - –ú–æ–¥—É–ª—å —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è —Å–∞–π—Ç—É
// ============================================
// –í–µ—Ä—Å—ñ—è: v0.5.0 - –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è + –®–≤–∏–¥–∫—ñ—Å—Ç—å
// –ó–º—ñ–Ω–∏: 
// - –ü—É–ª –≤–∫–ª–∞–¥–æ–∫ (–ø–∞—Ä–∞–ª–µ–ª—å–Ω–∏–π –∫—Ä–∞—É–ª—ñ–Ω–≥)
// - –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è –≤–∞–∂–∫–∏—Ö —Ä–µ—Å—É—Ä—Å—ñ–≤
// - –ü–∞—Ä—Å–∏–Ω–≥ sitemap.xml
// - –í–ª–∞—Å–Ω–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—É–ª—É (–±–µ–∑ p-limit)
// - –®–≤–∏–¥–∫—ñ—Å—Ç—å –≤ 5-10 —Ä–∞–∑—ñ–≤ —à–≤–∏–¥—à–µ! ‚ö°
// ============================================

const puppeteer = require('puppeteer');
const { EventEmitter } = require('events');
const axios = require('axios');
const cheerio = require('cheerio');

// –ß–∏—Ç–∞—î–º–æ –≤–µ—Ä—Å—ñ—é –∑ package.json
const { version } = require('../../package.json');

/**
 * –ö–ª–∞—Å –¥–ª—è —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –≤–µ–±-—Å–∞–π—Ç—É
 * –ü—ñ–¥—Ç—Ä–∏–º—É—î –ø–∞—Ä–∞–ª–µ–ª—å–Ω–∏–π –∫—Ä–∞—É–ª—ñ–Ω–≥ –¥–æ 10,000 —Å—Ç–æ—Ä—ñ–Ω–æ–∫
 */
class WebCrawler extends EventEmitter {
  constructor() {
    super();
    this.browser = null;
    this.pagePool = [];
    this.poolSize = 3; // –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∞—Ä–∞–ª–µ–ª—å–Ω–∏—Ö –≤–∫–ª–∞–¥–æ–∫ (3-5 –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ)
    
    this.visitedUrls = new Set();
    this.toVisit = [];
    this.results = [];
    this.baseUrl = '';
    this.baseDomain = '';
    this.maxPages = 100;
    this.isStopped = false;
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    this.stats = {
      startTime: null,
      endTime: null,
      totalRequests: 0,
      blockedRequests: 0
    };
    
    // ‚úÖ Throttle –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—É
    this.lastProgressTime = 0;
    this.progressThrottle = 200; // –û–Ω–æ–≤–ª—é–≤–∞—Ç–∏ –º–∞–∫—Å–∏–º—É–º —Ä–∞–∑ –Ω–∞ 200ms
    this.lastProgressData = null;
  }

  /**
   * ‚úÖ –ù–û–í–ï: –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—É –∑ throttle
   * –û–±–º–µ–∂—É—î —á–∞—Å—Ç–æ—Ç—É –æ–Ω–æ–≤–ª–µ–Ω—å –¥–æ 1 —Ä–∞–∑—É –Ω–∞ 200ms
   */
  emitProgress(url, force = false) {
    const now = Date.now();
    
    const progressData = {
      visited: this.visitedUrls.size,
      total: this.maxPages,
      currentUrl: url,
      found: this.toVisit.length,
      percent: Math.round((this.visitedUrls.size / this.maxPages) * 100)
    };
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ –¥–∞–Ω—ñ
    this.lastProgressData = progressData;
    
    // –Ø–∫—â–æ force –∞–±–æ –º–∏–Ω—É–ª–æ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ —á–∞—Å—É - –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ
    if (force || now - this.lastProgressTime > this.progressThrottle) {
      this.lastProgressTime = now;
      this.emit('progress', progressData);
    }
  }

  /**
   * –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è URL (–≤–∏–¥–∞–ª–µ–Ω–Ω—è —è–∫–æ—Ä—ñ–≤, trailing slash)
   */
  normalizeUrl(url) {
    try {
      const urlObj = new URL(url);
      urlObj.hash = '';
      let normalized = urlObj.href;
      if (normalized.endsWith('/') && normalized !== urlObj.origin + '/') {
        normalized = normalized.slice(0, -1);
      }
      return normalized;
    } catch {
      return url;
    }
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ URL –Ω–∞–ª–µ–∂–∏—Ç—å –¥–æ —Ç–æ–≥–æ –∂ –¥–æ–º–µ–Ω—É
   */
  isSameDomain(url) {
    try {
      const urlObj = new URL(url);
      return urlObj.hostname === this.baseDomain;
    } catch {
      return false;
    }
  }

  /**
   * ‚úÖ –ù–û–í–ï: –ü–∞—Ä—Å–∏–Ω–≥ sitemap.xml
   * –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–æ–±–ª—è—î sitemap —Ç–∞ sitemap index
   */
  async parseSitemap(sitemapUrl, depth = 0) {
    // –û–±–º–µ–∂—É—î–º–æ –≥–ª–∏–±–∏–Ω—É —Ä–µ–∫—É—Ä—Å—ñ—ó (—â–æ–± –Ω–µ –∑–∞—Ü–∏–∫–ª–∏—Ç–∏—Å—è)
    if (depth > 3) {
      console.log('‚ö†Ô∏è –î–æ—Å—è–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –≥–ª–∏–±–∏–Ω—É sitemap');
      return [];
    }

    try {
      console.log(`üìã –ü–∞—Ä—Å–∏–Ω–≥ sitemap: ${sitemapUrl} (—Ä—ñ–≤–µ–Ω—å ${depth})`);
      
      const response = await axios.get(sitemapUrl, {
        timeout: 10000,
        headers: {
          'User-Agent': `SEO-Audit-Tool/${version} (+https://github.com/username/seo-audit-tool)`
        }
      });

      const $ = cheerio.load(response.data, { xmlMode: true });
      const urls = [];

      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ Sitemap Index
      const sitemapLocs = $('sitemap loc');
      if (sitemapLocs.length > 0) {
        console.log(`üìÇ –ó–Ω–∞–π–¥–µ–Ω–æ sitemap index –∑ ${sitemapLocs.length} –¥–æ—á—ñ—Ä–Ω—ñ–º–∏ sitemap`);
        
        // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–∞—Ä—Å–∏–º–æ –∫–æ–∂–µ–Ω –¥–æ—á—ñ—Ä–Ω—ñ–π sitemap
        for (let i = 0; i < sitemapLocs.length; i++) {
          // ‚úÖ –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è: —è–∫—â–æ –≤–∂–µ –∑–Ω–∞–π—à–ª–∏ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ URL - –∑—É–ø–∏–Ω—è—î–º–æ—Å—å
          if (urls.length >= this.maxPages * 2) {
            console.log(`‚ö° –ó–Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ URL (${urls.length}), –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ä–µ—à—Ç—É sitemap`);
            break;
          }

          const childSitemapUrl = $(sitemapLocs[i]).text().trim();
          const childUrls = await this.parseSitemap(childSitemapUrl, depth + 1);
          urls.push(...childUrls);

          // ‚úÖ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É –ö–û–ñ–ï–ù –¥–æ—á—ñ—Ä–Ω—ñ–π sitemap + –∑–∞—Ç—Ä–∏–º–∫–∞
          this.emit('progress', {
            visited: this.visitedUrls.size,
            total: this.maxPages,
            currentUrl: `–ü–∞—Ä—Å–∏–º–æ sitemap (${i + 1}/${sitemapLocs.length})...`,
            found: urls.length,
            percent: 0
          });
          
          // ‚úÖ –†–µ–∞–ª—å–Ω–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è UI (100ms)
          await new Promise(resolve => setTimeout(resolve, 100));
        }
      } else {
        // Regular sitemap - –∑–±–∏—Ä–∞—î–º–æ URL
        $('url loc').each((i, elem) => {
          const url = $(elem).text().trim();
          if (url && this.isSameDomain(url)) {
            urls.push(this.normalizeUrl(url));
          }
        });
        
        console.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ ${urls.length} URL –≤ sitemap`);
      }

      return urls;
    } catch (error) {
      console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É sitemap ${sitemapUrl}:`, error.message);
      return [];
    }
  }

  /**
   * ‚úÖ –ù–û–í–ï: –°–ø—Ä–æ–±–∞ –∑–Ω–∞–π—Ç–∏ —Ç–∞ —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ sitemap
   */
  async tryParseSitemap() {
    const sitemapVariants = [
      '/sitemap.xml',
      '/sitemap_index.xml',
      '/sitemap-index.xml',
      '/post-sitemap.xml',
      '/page-sitemap.xml',
      '/category-sitemap.xml',
      '/product-sitemap.xml',
      '/sitemap1.xml'
    ];

    for (const variant of sitemapVariants) {
      const sitemapUrl = this.baseUrl + variant;
      
      try {
        // –®–≤–∏–¥–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —ñ—Å–Ω—É—î sitemap
        const response = await axios.head(sitemapUrl, { 
          timeout: 5000,
          headers: {
            'User-Agent': `SEO-Audit-Tool/${version}`
          }
        });
        
        if (response.status === 200) {
          console.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ sitemap: ${sitemapUrl}`);
          const urls = await this.parseSitemap(sitemapUrl);
          return urls;
        }
      } catch (error) {
        // Sitemap –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–±—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π
        continue;
      }
    }

    console.log('‚ö†Ô∏è Sitemap –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∫—Ä–∞—É–ª—ñ–Ω–≥ –≤—Ä—É—á–Ω—É');
    return [];
  }

  /**
   * ‚úÖ –ù–û–í–ï: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—É–ª—É –≤–∫–ª–∞–¥–æ–∫
   */
  async initializePool() {
    console.log(`üîß –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—É–ª—É –∑ ${this.poolSize} –ø–∞—Ä–∞–ª–µ–ª—å–Ω–∏—Ö –≤–∫–ª–∞–¥–æ–∫...`);
    
    for (let i = 0; i < this.poolSize; i++) {
      const page = await this.browser.newPage();
      
      // ‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–∫–ª–∞–¥–∫–∏
      await page.setDefaultNavigationTimeout(30000);
      await page.setUserAgent(
        `SEO-Audit-Tool/${version} (+https://github.com/username/seo-audit-tool)`
      );

      // ‚úÖ –ë–õ–û–ö–£–í–ê–ù–ù–Ø –í–ê–ñ–ö–ò–• –†–ï–°–£–†–°–Ü–í
      await page.setRequestInterception(true);
      
      page.on('request', request => {
        this.stats.totalRequests++;
        
        const resourceType = request.resourceType();
        const blockedTypes = ['image', 'stylesheet', 'font', 'media'];
        
        if (blockedTypes.includes(resourceType)) {
          this.stats.blockedRequests++;
          request.abort(); // –ë–ª–æ–∫—É—î–º–æ
        } else {
          request.continue(); // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ HTML, JS, XHR
        }
      });

      this.pagePool.push({
        page: page,
        busy: false,
        id: i
      });
    }

    console.log(`‚úÖ –ü—É–ª –≤–∫–ª–∞–¥–æ–∫ –≥–æ—Ç–æ–≤–∏–π (${this.poolSize} –≤–∫–ª–∞–¥–æ–∫)`);
  }

  /**
   * ‚úÖ –ù–û–í–ï: –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–ª—å–Ω–æ—ó –≤–∫–ª–∞–¥–∫–∏ –∑ –ø—É–ª—É
   */
  async getFreePage() {
    while (true) {
      const freePage = this.pagePool.find(p => !p.busy);
      if (freePage) {
        freePage.busy = true;
        return freePage;
      }
      // –Ø–∫—â–æ –≤—Å—ñ –∑–∞–π–Ω—è—Ç—ñ - —á–µ–∫–∞—î–º–æ 100ms
      await new Promise(resolve => setTimeout(resolve, 100));
    }
  }

  /**
   * ‚úÖ –ù–û–í–ï: –ó–≤—ñ–ª—å–Ω–µ–Ω–Ω—è –≤–∫–ª–∞–¥–∫–∏ –Ω–∞–∑–∞–¥ –≤ –ø—É–ª
   */
  releasePage(pageWrapper) {
    pageWrapper.busy = false;
  }

  /**
   * –ó–±—ñ—Ä –≤—Å—ñ—Ö –ø–æ—Å–∏–ª–∞–Ω—å –∑—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
   */
  async collectLinks(page) {
    try {
      const links = await page.evaluate(() => {
        const anchors = document.querySelectorAll('a[href]');
        return Array.from(anchors).map(a => a.href);
      });

      const validLinks = [];
      for (const link of links) {
        const normalized = this.normalizeUrl(link);
        if (this.isSameDomain(normalized) && !this.visitedUrls.has(normalized)) {
          validLinks.push(normalized);
        }
      }

      return validLinks;
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–æ—Ä—ñ –ø–æ—Å–∏–ª–∞–Ω—å:', error.message);
      return [];
    }
  }

  /**
   * ‚úÖ –û–ù–û–í–õ–ï–ù–û: –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –æ–¥–Ω—ñ—î—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∑ –ø—É–ª—É
   */
  async crawlPageFromPool(url) {
    const pageWrapper = await this.getFreePage();
    
    try {
      const page = pageWrapper.page;
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É
      const response = await page.goto(url, {
        waitUntil: 'domcontentloaded',
        timeout: 30000
      });

      // –ó–±–∏—Ä–∞—î–º–æ –¥–∞–Ω—ñ
      const statusCode = response ? response.status() : 0;
      const html = await page.content();
      const links = await this.collectLinks(page);

      const result = {
        url: url,
        statusCode: statusCode,
        html: html,
        links: links,
        timestamp: new Date().toISOString()
      };

      // ‚úÖ –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –∑ throttle
      this.emitProgress(url);

      return result;

    } catch (error) {
      console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞ ${url}:`, error.message);
      
      const result = {
        url: url,
        statusCode: 0,
        html: '',
        links: [],
        error: error.message,
        timestamp: new Date().toISOString()
      };

      // ‚úÖ –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –∑ throttle –Ω–∞–≤—ñ—Ç—å –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
      this.emitProgress(url);

      return result;
    } finally {
      // –ó–≤—ñ–ª—å–Ω—è—î–º–æ –≤–∫–ª–∞–¥–∫—É –Ω–∞–∑–∞–¥ –≤ –ø—É–ª
      this.releasePage(pageWrapper);
    }
  }

  /**
   * –ú–µ—Ç–æ–¥ –¥–ª—è –∑—É–ø–∏–Ω–∫–∏ –∫—Ä–∞—É–ª—ñ–Ω–≥—É
   */
  stop() {
    console.log('üõë –ó—É–ø–∏–Ω–∫–∞ –∫—Ä–∞—É–ª—ñ–Ω–≥—É...');
    this.isStopped = true;
  }

  /**
   * ‚úÖ –û–ù–û–í–õ–ï–ù–û: –ì–æ–ª–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥ –∫—Ä–∞—É–ª—ñ–Ω–≥—É –∑ –ø–∞—Ä–∞–ª–µ–ª—ñ–∑–º–æ–º
   */
  async crawl(startUrl, maxPages = 100) {
    this.stats.startTime = Date.now();
    
    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è maxPages
    if (maxPages < 10 || maxPages > 10000) {
      throw new Error('maxPages –ø–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ –≤—ñ–¥ 10 –¥–æ 10,000');
    }

    this.maxPages = maxPages;
    this.baseUrl = this.normalizeUrl(startUrl);
    
    try {
      const urlObj = new URL(this.baseUrl);
      this.baseDomain = urlObj.hostname;
    } catch (error) {
      throw new Error('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç URL');
    }

    console.log(`üï∑Ô∏è –ü–æ—á–∞—Ç–æ–∫ –∫—Ä–∞—É–ª—ñ–Ω–≥—É: ${this.baseUrl}`);
    console.log(`üìä –ú–∞–∫—Å–∏–º—É–º —Å—Ç–æ—Ä—ñ–Ω–æ–∫: ${this.maxPages}`);
    console.log(`‚ö° –ü–∞—Ä–∞–ª–µ–ª—å–Ω–∏—Ö –≤–∫–ª–∞–¥–æ–∫: ${this.poolSize}`);

    try {
      // ‚úÖ –ú–∏—Ç—Ç—î–≤–∏–π –Ω—É–ª—å–æ–≤–∏–π –ø—Ä–æ–≥—Ä–µ—Å
      this.emit('progress', {
        visited: 0,
        total: this.maxPages,
        currentUrl: '–ó–∞–ø—É—Å–∫–∞—î–º–æ –±—Ä–∞—É–∑–µ—Ä...',
        found: 0,
        percent: 0
      });

      // –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞
      this.browser = await puppeteer.launch({
        headless: 'new',
        args: [
          '--no-sandbox',
          '--disable-setuid-sandbox',
          '--disable-dev-shm-usage',
          '--disable-accelerated-2d-canvas',
          '--disable-gpu'
        ]
      });

      // ‚úÖ –ü—Ä–æ–≥—Ä–µ—Å: —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
      this.emit('progress', {
        visited: 0,
        total: this.maxPages,
        currentUrl: '–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è...',
        found: 0,
        percent: 0
      });

      // ‚úÖ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—É–ª—É –≤–∫–ª–∞–¥–æ–∫
      await this.initializePool();

      // ‚úÖ –°–ü–†–û–©–ï–ù–û: –ù–µ –ø–∞—Ä—Å–∏–º–æ sitemap –Ω–∞ —Å—Ç–∞—Ä—Ç—ñ, —â–æ–± –Ω–µ –±–ª–æ–∫—É–≤–∞—Ç–∏ UI
      // Sitemap –±—É–¥–µ –æ–±—Ä–æ–±–ª—è—Ç–∏—Å—è –≤ —Ñ–æ–Ω—ñ –ø—ñ–¥ —á–∞—Å –∫—Ä–∞—É–ª—ñ–Ω–≥—É
      
      // –î–æ–¥–∞—î–º–æ —Å—Ç–∞—Ä—Ç–æ–≤–∏–π URL
      this.toVisit.push(this.baseUrl);

      console.log(`üìä –ü–æ—á–∞—Ç–∫–æ–≤–∏–π URL: ${this.baseUrl}`);

      // ‚úÖ –ü—Ä–æ–≥—Ä–µ—Å: –≥–æ—Ç–æ–≤–æ –¥–æ —Å—Ç–∞—Ä—Ç—É
      this.emit('progress', {
        visited: 0,
        total: this.maxPages,
        currentUrl: '–ì–æ—Ç–æ–≤–æ! –ü–æ—á–∏–Ω–∞—î–º–æ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è...',
        found: 1,
        percent: 0
      });
      await new Promise(resolve => setTimeout(resolve, 100));

      // ‚úÖ –ü–ê–†–ê–õ–ï–õ–¨–ù–ò–ô –ö–†–ê–£–õ–Ü–ù–ì (—Å—Ç–∞—Ä—Ç—É—î –ú–ò–¢–¢–Ñ–í–û)
      while (this.toVisit.length > 0 && this.visitedUrls.size < this.maxPages) {
        
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∑—É–ø–∏–Ω–∫—É
        if (this.isStopped) {
          console.log('‚ö†Ô∏è –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º');
          break;
        }

        // –ë–µ—Ä–µ–º–æ –±–∞—Ç—á URL –¥–ª—è –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏
        const batchSize = Math.min(
          this.poolSize, 
          this.toVisit.length,
          this.maxPages - this.visitedUrls.size
        );

        const urlBatch = [];
        for (let i = 0; i < batchSize; i++) {
          const url = this.toVisit.shift();
          if (url && !this.visitedUrls.has(url)) {
            urlBatch.push(url);
            this.visitedUrls.add(url);
          }
        }

        if (urlBatch.length === 0) {
          continue;
        }

        // ‚úÖ –ü–ê–†–ê–õ–ï–õ–¨–ù–û –∫—Ä–∞—É–ª–∏–º–æ –±–∞—Ç—á URL
        const promises = urlBatch.map(url => this.crawlPageFromPool(url));
        const results = await Promise.all(promises);

        // –û–±—Ä–æ–±–ª—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        for (const pageData of results) {
          this.results.push(pageData);

          // –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
          for (const link of pageData.links) {
            if (!this.visitedUrls.has(link) && 
                !this.toVisit.includes(link) && 
                this.visitedUrls.size + this.toVisit.length < this.maxPages) {
              this.toVisit.push(link);
            }
          }
        }

        // ‚úÖ –ü–†–ò–ú–£–°–û–í–û –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –ø—ñ—Å–ª—è –±–∞—Ç—á—É
        if (this.lastProgressData) {
          this.emitProgress(this.lastProgressData.currentUrl, true);
        }

        // –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –±–∞—Ç—á–∞–º–∏ (–º–µ–Ω—à–∞ –¥–ª—è –≤–µ–ª–∏–∫–∏—Ö –∫—Ä–∞—É–ª—ñ–Ω–≥—ñ–≤)
        const delay = this.maxPages > 5000 ? 300 : 
                      this.maxPages > 1000 ? 500 : 1000;
        await new Promise(resolve => setTimeout(resolve, delay));
      }

      this.stats.endTime = Date.now();
      const duration = ((this.stats.endTime - this.stats.startTime) / 1000).toFixed(2);
      const pagesPerSecond = (this.visitedUrls.size / duration).toFixed(2);

      console.log(`‚úÖ –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${this.visitedUrls.size} —Å—Ç–æ—Ä—ñ–Ω–æ–∫`);
      console.log(`‚è±Ô∏è –ß–∞—Å: ${duration}s (${pagesPerSecond} —Å—Ç–æ—Ä—ñ–Ω–æ–∫/—Å–µ–∫)`);
      console.log(`üö´ –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Ç—ñ–≤: ${this.stats.blockedRequests}/${this.stats.totalRequests}`);

      // ‚úÖ –§—ñ–Ω–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å 100% (–ø—Ä–∏–º—É—Å–æ–≤–æ)
      this.emit('progress', {
        visited: this.visitedUrls.size,
        total: this.visitedUrls.size,
        currentUrl: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ!',
        found: 0,
        percent: 100
      });

    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error);
      throw error;
    } finally {
      await this.close();
    }

    return {
      stopped: this.isStopped,
      results: this.results,
      stats: {
        visitedPages: this.visitedUrls.size,
        foundUrls: this.visitedUrls.size + this.toVisit.length,
        baseUrl: this.baseUrl,
        duration: this.stats.endTime - this.stats.startTime,
        blockedRequests: this.stats.blockedRequests,
        totalRequests: this.stats.totalRequests
      }
    };
  }

  /**
   * –ó–∞–∫—Ä–∏—Ç—Ç—è –±—Ä–∞—É–∑–µ—Ä–∞ —Ç–∞ –ø—É–ª—É –≤–∫–ª–∞–¥–æ–∫
   */
  async close() {
    if (this.pagePool.length > 0) {
      console.log('üîß –ó–∞–∫—Ä–∏—Ç—Ç—è –ø—É–ª—É –≤–∫–ª–∞–¥–æ–∫...');
      for (const pageWrapper of this.pagePool) {
        try {
          if (pageWrapper.page && !pageWrapper.page.isClosed()) {
            await pageWrapper.page.close();
          }
        } catch (error) {
          // –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ
        }
      }
      this.pagePool = [];
    }

    if (this.browser) {
      await this.browser.close();
      this.browser = null;
    }
  }
}

module.exports = { WebCrawler };