// ============================================
// EXCEL-EXPORTER.JS - –ï–∫—Å–ø–æ—Ä—Ç –≤ Excel
// ============================================
// –í–µ—Ä—Å—ñ—è: v0.6.0 - –û–∫—Ä–µ–º—ñ –∞—Ä–∫—É—à—ñ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç–∏–ø—É –ø—Ä–æ–±–ª–µ–º–∏
// ============================================

const ExcelJS = require('exceljs');
const path = require('path');
const fs = require('fs').promises;

class ExcelExporter {
  constructor() {
    this.workbook = null;
  }

  /**
   * –ì–æ–ª–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥ –µ–∫—Å–ø–æ—Ä—Ç—É
   */
  async generateReport(auditData) {
    console.log('üìä –ï–∫—Å–ø–æ—Ä—Ç –≤ Excel...');
    console.log('üìä –î–∞–Ω—ñ –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É:', {
      baseUrl: auditData.baseUrl,
      score: auditData.score,
      totalPages: auditData.totalPages,
      issues: auditData.issues?.length || 0,
      pages: auditData.pages?.length || 0
    });

    this.workbook = new ExcelJS.Workbook();
    
    // –ú–µ—Ç–∞–¥–∞–Ω—ñ
    this.workbook.creator = 'SEO Audit Tool';
    this.workbook.created = new Date();

    // –°—Ç–≤–æ—Ä—é—î–º–æ –∞—Ä–∫—É—à—ñ
    await this.createSummarySheet(auditData);
    await this.createStatsSheet(auditData);
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ –æ–∫—Ä–µ–º—ñ –∞—Ä–∫—É—à—ñ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç–∏–ø—É –ø—Ä–æ–±–ª–µ–º–∏
    await this.createSeparateIssueSheets(auditData);
    
    await this.createPagesSheet(auditData);

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ–∞–π–ª
    const filename = await this.saveWorkbook(auditData.baseUrl);
    
    console.log('‚úÖ Excel –∑–≤—ñ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ:', filename);
    return filename;
  }

  /**
   * –õ–∏—Å—Ç 1: –ó–∞–≥–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç
   */
  async createSummarySheet(auditData) {
    const sheet = this.workbook.addWorksheet('–ó–∞–≥–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç', {
      views: [{ state: 'frozen', xSplit: 0, ySplit: 1 }]
    });

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    sheet.columns = [
      { header: 'URL', key: 'url', width: 60 },
      { header: 'Status', key: 'status', width: 10 },
      { header: 'Title', key: 'title', width: 50 },
      { header: 'Description', key: 'description', width: 60 },
      { header: 'H1', key: 'h1', width: 40 },
      { header: '–ü—Ä–æ–±–ª–µ–º', key: 'issues', width: 12 }
    ];

    // –°—Ç–∏–ª—å –∑–∞–≥–æ–ª–æ–≤–∫–∞
    sheet.getRow(1).font = { bold: true, color: { argb: 'FFFFFFFF' } };
    sheet.getRow(1).fill = {
      type: 'pattern',
      pattern: 'solid',
      fgColor: { argb: 'FF4472C4' }
    };
    sheet.getRow(1).alignment = { vertical: 'middle', horizontal: 'center' };

    // –î–∞–Ω—ñ
    if (auditData.pages && auditData.pages.length > 0) {
      auditData.pages.forEach(page => {
        const issuesCount = this.countPageIssues(page, auditData.checks);
        
        sheet.addRow({
          url: page.url,
          status: page.statusCode,
          title: this.extractTitle(page.html),
          description: this.extractDescription(page.html),
          h1: this.extractH1(page.html),
          issues: issuesCount
        });
      });
    }

    // –ê–≤—Ç–æ—Ñ—ñ–ª—å—Ç—Ä
    sheet.autoFilter = {
      from: { row: 1, column: 1 },
      to: { row: 1, column: 6 }
    };
  }

  /**
   * –õ–∏—Å—Ç 2: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
   */
  async createStatsSheet(auditData) {
    const sheet = this.workbook.addWorksheet('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞');

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    sheet.mergeCells('A1:B1');
    sheet.getCell('A1').value = 'üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê SEO –ê–£–î–ò–¢–£';
    sheet.getCell('A1').font = { bold: true, size: 16 };
    sheet.getCell('A1').alignment = { horizontal: 'center', vertical: 'middle' };
    sheet.getRow(1).height = 30;

    let row = 3;

    // –ó–∞–≥–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
    this.addStatRow(sheet, row++, '–°–∞–π—Ç:', auditData.baseUrl, 'info');
    this.addStatRow(sheet, row++, '–î–∞—Ç–∞ –∞—É–¥–∏—Ç—É:', new Date().toLocaleString('uk-UA'), 'info');
    row++;

    // SEO –±–∞–ª
    const scoreColor = auditData.score >= 80 ? 'success' : auditData.score >= 60 ? 'warning' : 'error';
    this.addStatRow(sheet, row++, 'üéØ SEO –ë–∞–ª:', `${auditData.score}/100`, scoreColor);
    row++;

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∏
    this.addStatRow(sheet, row++, '–í—Å—å–æ–≥–æ –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫:', auditData.passedChecks + auditData.failedChecks, 'info');
    this.addStatRow(sheet, row++, '‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ:', auditData.passedChecks, 'success');
    this.addStatRow(sheet, row++, '‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ:', auditData.failedChecks, 'error');
    row++;

    // –ü—Ä–æ–±–ª–µ–º–∏ –∑–∞ –∫—Ä–∏—Ç–∏—á–Ω—ñ—Å—Ç—é
    this.addStatRow(sheet, row++, '–í—Å—å–æ–≥–æ –ø—Ä–æ–±–ª–µ–º:', auditData.issues?.length || 0, 'info');
    this.addStatRow(sheet, row++, 'üî• –ö—Ä–∏—Ç–∏—á–Ω—ñ:', auditData.criticalIssues, 'critical');
    this.addStatRow(sheet, row++, '‚ö†Ô∏è –í–∏—Å–æ–∫—ñ:', auditData.highIssues, 'high');
    this.addStatRow(sheet, row++, '‚ö° –°–µ—Ä–µ–¥–Ω—ñ:', auditData.mediumIssues, 'medium');
    this.addStatRow(sheet, row++, 'üí° –ù–∏–∑—å–∫—ñ:', auditData.lowIssues, 'low');
    row++;

    // –°—Ç–æ—Ä—ñ–Ω–∫–∏
    this.addStatRow(sheet, row++, '–ü—Ä–æ—Å–∫–∞–Ω–æ–≤–∞–Ω–æ —Å—Ç–æ—Ä—ñ–Ω–æ–∫:', auditData.totalPages, 'info');

    // –®–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
    sheet.getColumn(1).width = 30;
    sheet.getColumn(2).width = 40;
  }

  /**
   * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–∫—Ä–µ–º–∏—Ö –∞—Ä–∫—É—à—ñ–≤ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç–∏–ø—É –ø—Ä–æ–±–ª–µ–º–∏
   */
  async createSeparateIssueSheets(auditData) {
    if (!auditData.issues || auditData.issues.length === 0) {
      console.log('üìä –ù–µ–º–∞—î issues –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–∫—Ä–µ–º–∏—Ö –∞—Ä–∫—É—à—ñ–≤');
      return;
    }

    console.log('üêõ DEBUG: –°—Ç–≤–æ—Ä—é—î–º–æ –æ–∫—Ä–µ–º—ñ –∞—Ä–∫—É—à—ñ –¥–ª—è issues...');
    console.log('üêõ Total issues:', auditData.issues.length);

    // –ì—Ä—É–ø—É—î–º–æ issues –ø–æ —Ç–∏–ø—É
    const issuesByType = {};
    auditData.issues.forEach(issue => {
      const type = issue.type;
      if (!issuesByType[type]) {
        issuesByType[type] = [];
      }
      issuesByType[type].push(issue);
    });

    console.log('üêõ Issue types:', Object.keys(issuesByType));
    console.log('üêõ Issues by type:', Object.entries(issuesByType).map(([type, issues]) => `${type}: ${issues.length}`));

    // –°—Ç–≤–æ—Ä—é—î–º–æ –∞—Ä–∫—É—à –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç–∏–ø—É
    for (const [type, issues] of Object.entries(issuesByType)) {
      await this.createIssueSheet(type, issues, auditData);
    }
  }

  /**
   * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞—Ä–∫—É—à—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø—É –ø—Ä–æ–±–ª–µ–º–∏
   */
  async createIssueSheet(issueType, issues, auditData) {
    console.log(`üìã –°—Ç–≤–æ—Ä—é—î–º–æ –∞—Ä–∫—É—à: "${issueType}" (${issues.length} issues)`);

    // –°–∫–æ—Ä–æ—á—É—î–º–æ –Ω–∞–∑–≤—É —è–∫—â–æ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∞ (Excel –º–∞—î –ª—ñ–º—ñ—Ç 31 —Å–∏–º–≤–æ–ª)
    let sheetName = issueType;
    if (sheetName.length > 31) {
      sheetName = sheetName.substring(0, 28) + '...';
    }

    const sheet = this.workbook.addWorksheet(sheetName, {
      views: [{ state: 'frozen', xSplit: 0, ySplit: 1 }]
    });

    // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É –ø—Ä–æ–±–ª–µ–º–∏
    switch (issueType) {
      case 'Status Codes':
        this.createStatusCodesSheet(sheet, issues, auditData);
        break;
      
      case 'Title Tags':
        this.createTitleIssuesSheet(sheet, issues, auditData);
        break;
      
      case 'Meta Description':
        this.createDescriptionIssuesSheet(sheet, issues, auditData);
        break;
      
      case 'H1 Tags':
        this.createH1IssuesSheet(sheet, issues, auditData);
        break;
      
      case 'URL Structure':
        this.createURLIssuesSheet(sheet, issues, auditData);
        break;
      
      default:
        this.createGenericIssueSheet(sheet, issues, auditData);
    }
  }

  /**
   * –ê—Ä–∫—É—à –¥–ª—è –ø–æ–º–∏–ª–æ–∫ —Å—Ç–∞—Ç—É—Å –∫–æ–¥—ñ–≤ (4xx, 5xx)
   */
  createStatusCodesSheet(sheet, issues, auditData) {
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏
    sheet.columns = [
      { header: '–î–µ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è', key: 'referrer', width: 60 },
      { header: '–°—Ç–æ—Ä—ñ–Ω–∫–∞ –∑ –ø–æ–º–∏–ª–∫–æ—é', key: 'url', width: 60 },
      { header: '–ö–æ–¥', key: 'code', width: 10 },
      { header: '–†—ñ—à–µ–Ω–Ω—è', key: 'solution', width: 50 }
    ];

    this.styleHeader(sheet);

    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∑ 4xx/5xx –∫–æ–¥–∞–º–∏
    if (auditData.checks?.statusCodes) {
      const checks = auditData.checks.statusCodes;
      
      auditData.pages?.forEach(page => {
        if (page.statusCode >= 400) {
          const solution = page.statusCode >= 500 
            ? '–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å–µ—Ä–≤–µ—Ä —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ö–æ—Å—Ç–∏–Ω–≥—É'
            : '–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ 301 —Ä–µ–¥–∏—Ä–µ–∫—Ç –∞–±–æ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è';

          sheet.addRow({
            referrer: 'N/A (–ø–æ—Ç—Ä–µ–±—É—î –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ –∫—Ä–∞—É–ª—ñ–Ω–≥—É)',
            url: page.url,
            code: page.statusCode,
            solution: solution
          });

          // –ö–æ–ª—ñ—Ä –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –∫–æ–¥—É
          const lastRow = sheet.lastRow;
          const color = page.statusCode >= 500 ? 'FFFF0000' : 'FFFFA500';
          lastRow.getCell(3).fill = {
            type: 'pattern',
            pattern: 'solid',
            fgColor: { argb: color }
          };
          lastRow.getCell(3).font = { color: { argb: 'FFFFFFFF' }, bold: true };
        }
      });
    }

    this.addAutoFilter(sheet);
  }

  /**
   * –ê—Ä–∫—É—à –¥–ª—è –ø—Ä–æ–±–ª–µ–º –∑ Title
   */
  createTitleIssuesSheet(sheet, issues, auditData) {
    sheet.columns = [
      { header: 'URL', key: 'url', width: 60 },
      { header: '–ü–æ—Ç–æ—á–Ω–∏–π Title', key: 'title', width: 50 },
      { header: '–î–æ–≤–∂–∏–Ω–∞', key: 'length', width: 12 },
      { header: '–ü—Ä–æ–±–ª–µ–º–∞', key: 'problem', width: 30 },
      { header: '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è', key: 'recommendation', width: 50 }
    ];

    this.styleHeader(sheet);

    // –ë–µ—Ä–µ–º–æ –¥–∞–Ω—ñ –∑ checks
    const titleChecks = auditData.checks?.titles;
    if (!titleChecks) return;

    // –î–æ–¥–∞—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –±–µ–∑ title
    titleChecks.missingPages?.forEach(url => {
      sheet.addRow({
        url: url,
        title: '-',
        length: 0,
        problem: '–í—ñ–¥—Å—É—Ç–Ω—ñ–π Title',
        recommendation: '–î–æ–¥–∞—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π <title> –≤ <head> —Å–µ–∫—Ü—ñ—é'
      });
    });

    // –î–æ–¥–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ title
    titleChecks.emptyPages?.forEach(url => {
      sheet.addRow({
        url: url,
        title: '(–ø–æ—Ä–æ–∂–Ω—ñ–π)',
        length: 0,
        problem: '–ü–æ—Ä–æ–∂–Ω—ñ–π Title',
        recommendation: '–î–æ–¥–∞—Ç–∏ –∑–º—ñ—Å—Ç–æ–≤–Ω–∏–π title 30-60 —Å–∏–º–≤–æ–ª—ñ–≤'
      });
    });

    // –î–æ–¥–∞—î–º–æ –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫—ñ
    titleChecks.tooShortPages?.forEach(item => {
      sheet.addRow({
        url: item.url,
        title: item.title || '-',
        length: item.length,
        problem: '–ó–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π',
        recommendation: '–ó–±—ñ–ª—å—à–∏—Ç–∏ –¥–æ 30-60 —Å–∏–º–≤–æ–ª—ñ–≤'
      });
    });

    // –î–æ–¥–∞—î–º–æ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥—ñ
    titleChecks.tooLongPages?.forEach(item => {
      sheet.addRow({
        url: item.url,
        title: item.title || '-',
        length: item.length,
        problem: '–ó–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π',
        recommendation: '–°–∫–æ—Ä–æ—Ç–∏—Ç–∏ –¥–æ 30-60 —Å–∏–º–≤–æ–ª—ñ–≤ (Google –æ–±—Ä—ñ–∂–µ)'
      });
    });

    // –î–æ–¥–∞—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏
    titleChecks.duplicateGroups?.forEach(([title, urls]) => {
      urls.forEach((url, index) => {
        sheet.addRow({
          url: url,
          title: title,
          length: title.length,
          problem: `–î—É–±–ª—ñ–∫–∞—Ç (${urls.length} —Å—Ç–æ—Ä—ñ–Ω–æ–∫)`,
          recommendation: index === 0 
            ? '–ó—Ä–æ–±–∏—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π title –¥–ª—è –∫–æ–∂–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏'
            : '‚Üë –¢–æ–π —Å–∞–º–∏–π title —â–æ –≤–∏—â–µ'
        });
      });
    });

    this.addAutoFilter(sheet);
  }

  /**
   * –ê—Ä–∫—É—à –¥–ª—è –ø—Ä–æ–±–ª–µ–º –∑ Description
   */
  createDescriptionIssuesSheet(sheet, issues, auditData) {
    sheet.columns = [
      { header: 'URL', key: 'url', width: 60 },
      { header: '–ü–æ—Ç–æ—á–Ω–∏–π Description', key: 'description', width: 70 },
      { header: '–î–æ–≤–∂–∏–Ω–∞', key: 'length', width: 12 },
      { header: '–ü—Ä–æ–±–ª–µ–º–∞', key: 'problem', width: 30 },
      { header: '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è', key: 'recommendation', width: 50 }
    ];

    this.styleHeader(sheet);

    const descChecks = auditData.checks?.descriptions;
    if (!descChecks) return;

    // –ü–æ—Ä–æ–∂–Ω—ñ
    descChecks.emptyPages?.forEach(url => {
      sheet.addRow({
        url: url,
        description: '-',
        length: 0,
        problem: '–í—ñ–¥—Å—É—Ç–Ω—ñ–π Description',
        recommendation: '–î–æ–¥–∞—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π description 120-160 —Å–∏–º–≤–æ–ª—ñ–≤'
      });
    });

    // –ó–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫—ñ
    descChecks.tooShortPages?.forEach(item => {
      sheet.addRow({
        url: item.url,
        description: '(–∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π)',
        length: item.length,
        problem: '–ó–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π',
        recommendation: '–ó–±—ñ–ª—å—à–∏—Ç–∏ –¥–æ 120-160 —Å–∏–º–≤–æ–ª—ñ–≤'
      });
    });

    // –ó–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥—ñ
    descChecks.tooLongPages?.forEach(item => {
      sheet.addRow({
        url: item.url,
        description: '(–∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π)',
        length: item.length,
        problem: '–ó–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π',
        recommendation: '–°–∫–æ—Ä–æ—Ç–∏—Ç–∏ –¥–æ 120-160 —Å–∏–º–≤–æ–ª—ñ–≤'
      });
    });

    // –î—É–±–ª—ñ–∫–∞—Ç–∏
    descChecks.duplicateGroups?.forEach(([description, urls]) => {
      urls.forEach((url, index) => {
        sheet.addRow({
          url: url,
          description: description.substring(0, 100) + (description.length > 100 ? '...' : ''),
          length: description.length,
          problem: `–î—É–±–ª—ñ–∫–∞—Ç (${urls.length} —Å—Ç–æ—Ä—ñ–Ω–æ–∫)`,
          recommendation: '–ó—Ä–æ–±–∏—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π description'
        });
      });
    });

    this.addAutoFilter(sheet);
  }

  /**
   * –ê—Ä–∫—É—à –¥–ª—è –ø—Ä–æ–±–ª–µ–º –∑ H1
   */
  createH1IssuesSheet(sheet, issues, auditData) {
    sheet.columns = [
      { header: 'URL', key: 'url', width: 60 },
      { header: '–ü–æ—Ç–æ—á–Ω–∏–π H1', key: 'h1', width: 50 },
      { header: '–ö—ñ–ª—å–∫—ñ—Å—Ç—å H1', key: 'count', width: 15 },
      { header: '–ü—Ä–æ–±–ª–µ–º–∞', key: 'problem', width: 30 },
      { header: '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è', key: 'recommendation', width: 50 }
    ];

    this.styleHeader(sheet);

    const h1Checks = auditData.checks?.h1Tags;
    if (!h1Checks) return;

    // –í—ñ–¥—Å—É—Ç–Ω—ñ H1
    h1Checks.missingPages?.forEach(url => {
      sheet.addRow({
        url: url,
        h1: '-',
        count: 0,
        problem: '–í—ñ–¥—Å—É—Ç–Ω—ñ–π H1',
        recommendation: '–î–æ–¥–∞—Ç–∏ –æ–¥–∏–Ω H1 –∑–∞–≥–æ–ª–æ–≤–æ–∫ 20-70 —Å–∏–º–≤–æ–ª—ñ–≤'
      });
    });

    // –ö—ñ–ª—å–∫–∞ H1
    h1Checks.multiplePages?.forEach(item => {
      sheet.addRow({
        url: item.url,
        h1: '-',
        count: item.count,
        problem: `${item.count} H1 –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ`,
        recommendation: '–ó–∞–ª–∏—à–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –æ–¥–∏–Ω H1, —ñ–Ω—à—ñ –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞ H2-H6'
      });
    });

    // –ü–æ—Ä–æ–∂–Ω—ñ H1
    h1Checks.emptyPages?.forEach(url => {
      sheet.addRow({
        url: url,
        h1: '(–ø–æ—Ä–æ–∂–Ω—ñ–π)',
        count: 1,
        problem: '–ü–æ—Ä–æ–∂–Ω—ñ–π H1',
        recommendation: '–î–æ–¥–∞—Ç–∏ —Ç–µ–∫—Å—Ç –≤ H1'
      });
    });

    this.addAutoFilter(sheet);
  }

  /**
   * –ê—Ä–∫—É—à –¥–ª—è –ø—Ä–æ–±–ª–µ–º –∑ URL —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é
   */
  createURLIssuesSheet(sheet, issues, auditData) {
    sheet.columns = [
      { header: 'URL', key: 'url', width: 70 },
      { header: '–ü—Ä–æ–±–ª–µ–º–∞', key: 'problem', width: 30 },
      { header: '–î–µ—Ç–∞–ª—ñ', key: 'details', width: 50 }
    ];

    this.styleHeader(sheet);

    const urlChecks = auditData.checks?.urlStructure;
    if (!urlChecks?.issues) return;

    urlChecks.issues.forEach(item => {
      sheet.addRow({
        url: item.url,
        problem: item.problems.join(', '),
        details: '–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –ª–∞—Ç–∏–Ω–∏—Ü—é, –¥–µ—Ñ—ñ—Å–∏ –∑–∞–º—ñ—Å—Ç—å –ø—Ä–æ–±—ñ–ª—ñ–≤, –∫–æ—Ä–æ—Ç—à—ñ URL'
      });
    });

    this.addAutoFilter(sheet);
  }

  /**
   * –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –∞—Ä–∫—É—à –¥–ª—è —ñ–Ω—à–∏—Ö —Ç–∏–ø—ñ–≤ –ø—Ä–æ–±–ª–µ–º
   */
  createGenericIssueSheet(sheet, issues, auditData) {
    sheet.columns = [
      { header: 'Severity', key: 'severity', width: 12 },
      { header: '–û–ø–∏—Å –ø—Ä–æ–±–ª–µ–º–∏', key: 'message', width: 60 },
      { header: '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è', key: 'recommendation', width: 60 }
    ];

    this.styleHeader(sheet);

    issues.forEach(issue => {
      const row = sheet.addRow({
        severity: issue.severity.toUpperCase(),
        message: issue.message,
        recommendation: issue.recommendation || '–î–∏–≤. –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é'
      });

      // –ö–æ–ª—ñ—Ä severity
      const severityCell = row.getCell(1);
      const colors = {
        'CRITICAL': 'FFFF0000',
        'HIGH': 'FFFFA500',
        'MEDIUM': 'FFFFFF00',
        'LOW': 'FF90EE90',
        'WARNING': 'FFFFA500'
      };

      severityCell.fill = {
        type: 'pattern',
        pattern: 'solid',
        fgColor: { argb: colors[issue.severity.toUpperCase()] || 'FFCCCCCC' }
      };
      severityCell.font = { bold: true, color: { argb: 'FF000000' } };
    });

    this.addAutoFilter(sheet);
  }

  /**
   * –õ–∏—Å—Ç –∑ —É—Å—ñ–º–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞–º–∏ (–¥–µ—Ç–∞–ª—å–Ω–æ)
   */
  async createPagesSheet(auditData) {
    const sheet = this.workbook.addWorksheet('–í—Å—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏', {
      views: [{ state: 'frozen', xSplit: 0, ySplit: 1 }]
    });

    sheet.columns = [
      { header: 'URL', key: 'url', width: 60 },
      { header: 'Status', key: 'status', width: 10 },
      { header: 'Title', key: 'title', width: 50 },
      { header: 'Title (–¥–æ–≤–∂–∏–Ω–∞)', key: 'titleLength', width: 15 },
      { header: 'Description', key: 'description', width: 60 },
      { header: 'H1', key: 'h1', width: 40 }
    ];

    this.styleHeader(sheet);

    if (auditData.pages) {
      auditData.pages.forEach(page => {
        const title = this.extractTitle(page.html);
        
        sheet.addRow({
          url: page.url,
          status: page.statusCode,
          title: title || '-',
          titleLength: title ? title.length : 0,
          description: this.extractDescription(page.html) || '-',
          h1: this.extractH1(page.html) || '-'
        });
      });
    }

    this.addAutoFilter(sheet);
  }

  // ============================================
  // –î–û–ü–û–ú–Ü–ñ–ù–Ü –ú–ï–¢–û–î–ò
  // ============================================

  /**
   * –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ä—è–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  addStatRow(sheet, row, label, value, type = 'info') {
    const labelCell = sheet.getCell(`A${row}`);
    const valueCell = sheet.getCell(`B${row}`);

    labelCell.value = label;
    labelCell.font = { bold: true };
    labelCell.alignment = { horizontal: 'right' };

    valueCell.value = value;
    valueCell.font = { bold: true };

    const colors = {
      'success': 'FF90EE90',
      'warning': 'FFFFFF00',
      'error': 'FFFF6B6B',
      'critical': 'FFFF0000',
      'high': 'FFFFA500',
      'medium': 'FFFFFF00',
      'low': 'FF90EE90',
      'info': 'FFE3F2FD'
    };

    if (colors[type]) {
      valueCell.fill = {
        type: 'pattern',
        pattern: 'solid',
        fgColor: { argb: colors[type] }
      };
    }

    sheet.getRow(row).height = 25;
  }

  /**
   * –°—Ç–∏–ª—ñ–∑–∞—Ü—ñ—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
   */
  styleHeader(sheet) {
    sheet.getRow(1).font = { bold: true, color: { argb: 'FFFFFFFF' } };
    sheet.getRow(1).fill = {
      type: 'pattern',
      pattern: 'solid',
      fgColor: { argb: 'FF4472C4' }
    };
    sheet.getRow(1).alignment = { vertical: 'middle', horizontal: 'center' };
    sheet.getRow(1).height = 30;
  }

  /**
   * –î–æ–¥–∞–≤–∞–Ω–Ω—è –∞–≤—Ç–æ—Ñ—ñ–ª—å—Ç—Ä—É
   */
  addAutoFilter(sheet) {
    if (sheet.rowCount > 1) {
      sheet.autoFilter = {
        from: { row: 1, column: 1 },
        to: { row: 1, column: sheet.columnCount }
      };
    }
  }

  /**
   * –í–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è Title –∑ HTML
   */
  extractTitle(html) {
    if (!html) return null;
    const match = html.match(/<title[^>]*>([^<]+)<\/title>/i);
    return match ? match[1].trim() : null;
  }

  /**
   * –í–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è Description –∑ HTML
   */
  extractDescription(html) {
    if (!html) return null;
    const match = html.match(/<meta[^>]*name=["']description["'][^>]*content=["']([^"']+)["']/i);
    return match ? match[1].trim() : null;
  }

  /**
   * –í–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è H1 –∑ HTML
   */
  extractH1(html) {
    if (!html) return null;
    const match = html.match(/<h1[^>]*>([^<]+)<\/h1>/i);
    return match ? match[1].trim() : null;
  }

  /**
   * –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –ø—Ä–æ–±–ª–µ–º –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
   */
  countPageIssues(page, checks) {
    let count = 0;
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å –∫–æ–¥—É
    if (page.statusCode >= 400) count++;
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ title
    const title = this.extractTitle(page.html);
    if (!title || title.length < 30 || title.length > 60) count++;
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ h1
    const h1 = this.extractH1(page.html);
    if (!h1) count++;

    return count;
  }

  /**
   * –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É
   */
  async saveWorkbook(baseUrl) {
    const reportsDir = path.join(__dirname, '../../reports');
    await fs.mkdir(reportsDir, { recursive: true });

    const domain = new URL(baseUrl).hostname.replace('www.', '');
    const timestamp = Date.now();
    const filename = `seo-audit-${domain}-${timestamp}.xlsx`;
    const filepath = path.join(reportsDir, filename);

    await this.workbook.xlsx.writeFile(filepath);

    return filename;
  }
}

module.exports = ExcelExporter;