// ============================================
// GOOGLE-SHEETS.JS - Google Sheets Exporter
// ============================================
// –í–µ—Ä—Å—ñ—è: v0.7.0
// –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: –ï–∫—Å–ø–æ—Ä—Ç SEO –∞—É–¥–∏—Ç—É –≤ Google Sheets
// ============================================

const { google } = require('googleapis');

// ============================================
// GOOGLE SHEETS EXPORTER
// ============================================

class GoogleSheetsExporter {
  constructor(auth) {
    this.sheets = google.sheets({ version: 'v4', auth });
    this.drive = google.drive({ version: 'v3', auth });
  }

  /**
   * –°—Ç–≤–æ—Ä–∏—Ç–∏ –∞—É–¥–∏—Ç –≤ Google Sheets
   */
  async createAuditSpreadsheet(auditData) {
    try {
      console.log('üìä –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Google Sheets...');

      // –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É —Ç–∞–±–ª–∏—Ü—é
      const spreadsheet = await this.createSpreadsheet(auditData);
      const spreadsheetId = spreadsheet.data.spreadsheetId;

      console.log('üìã –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –∞—Ä–∫—É—à—ñ–≤ –¥–∞–Ω–∏–º–∏...');

      // –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞—Ä–∫—É—à—ñ
      await this.populateGeneralReport(spreadsheetId, auditData);
      await this.populateStatistics(spreadsheetId, auditData);
      await this.populateIssueSheets(spreadsheetId, auditData);
      await this.populateAllPages(spreadsheetId, auditData);

      console.log('üé® –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ...');

      // –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
      await this.formatSpreadsheet(spreadsheetId, auditData);

      console.log('‚úÖ Google Sheets —Å—Ç–≤–æ—Ä–µ–Ω–æ!');

      return {
        success: true,
        url: spreadsheet.data.spreadsheetUrl,
        spreadsheetId: spreadsheetId
      };
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è Google Sheets:', error.message);
      throw error;
    }
  }

  /**
   * –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ—Ä–æ–∂–Ω—é —Ç–∞–±–ª–∏—Ü—é
   */
  async createSpreadsheet(auditData) {
    const urlObj = new URL(auditData.url);
    const domain = urlObj.hostname;
    const date = new Date().toLocaleString('uk-UA', { 
      day: '2-digit', 
      month: '2-digit', 
      year: 'numeric' 
    });

    // –ì—Ä—É–ø—É–≤–∞—Ç–∏ issues –∑–∞ —Ç–∏–ø–æ–º
    const issueTypes = this.groupIssuesByType(auditData.issues || []);

    // –°—Ç–≤–æ—Ä–∏—Ç–∏ –∞—Ä–∫—É—à—ñ
    const sheets = [
      { properties: { title: 'üìä –ó–∞–≥–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç', index: 0 } },
      { properties: { title: 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', index: 1 } }
    ];

    // –î–æ–¥–∞—Ç–∏ –æ–∫—Ä–µ–º—ñ –∞—Ä–∫—É—à—ñ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç–∏–ø—É –ø—Ä–æ–±–ª–µ–º
    let index = 2;
    for (const [type, issues] of Object.entries(issueTypes)) {
      if (issues.length > 0) {
        sheets.push({
          properties: {
            title: this.getSheetTitle(type),
            index: index++
          }
        });
      }
    }

    // –î–æ–¥–∞—Ç–∏ –∞—Ä–∫—É—à –≤—Å—ñ—Ö —Å—Ç–æ—Ä—ñ–Ω–æ–∫
    sheets.push({
      properties: {
        title: 'üìÑ –í—Å—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏',
        index: index
      }
    });

    return await this.sheets.spreadsheets.create({
      resource: {
        properties: {
          title: `SEO –ê—É–¥–∏—Ç - ${domain} - ${date}`
        },
        sheets: sheets
      }
    });
  }

  /**
   * –ì—Ä—É–ø—É–≤–∞—Ç–∏ issues –∑–∞ —Ç–∏–ø–æ–º
   */
  groupIssuesByType(issues) {
    const grouped = {};

    for (const issue of issues) {
      const type = issue.type || 'other';
      if (!grouped[type]) {
        grouped[type] = [];
      }
      grouped[type].push(issue);
    }

    return grouped;
  }

  /**
   * –û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–∑–≤—É –∞—Ä–∫—É—à–∞ –¥–ª—è —Ç–∏–ø—É –ø—Ä–æ–±–ª–µ–º–∏
   */
  getSheetTitle(type) {
    const titles = {
      'status_codes': 'üî¥ Status Codes',
      'title_tags': 'üìù Title Tags',
      'meta_description': 'üìã Meta Description',
      'h1_tags': 'üè∑Ô∏è H1 Tags',
      'url_structure': 'üîó URL Structure',
      'canonical': 'üîÑ Canonical',
      'images': 'üñºÔ∏è Images',
      'headings': 'üìë Headings',
      'other': '‚ùì –Ü–Ω—à—ñ –ø—Ä–æ–±–ª–µ–º–∏'
    };

    return titles[type] || '‚ùì –Ü–Ω—à—ñ –ø—Ä–æ–±–ª–µ–º–∏';
  }

  /**
   * –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∑–∞–≥–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç
   */
  async populateGeneralReport(spreadsheetId, auditData) {
    const sheetName = 'üìä –ó–∞–≥–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç';

    // –ó–∞–≥–æ–ª–æ–≤–∫–∏
    const headers = [
      ['URL', 'Status', 'Title', 'H1', '–ü—Ä–æ–±–ª–µ–º–∏', '–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç']
    ];

    // –î–∞–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–æ–∫
    const rows = (auditData.pages || []).map(page => {
      const pageIssues = (auditData.issues || []).filter(issue =>
        issue.urls && issue.urls.includes(page.url)
      );

      const maxPriority = this.getMaxPriority(pageIssues);

      return [
        page.url,
        page.statusCode || 'N/A',
        page.title || '–ë–µ–∑ title',
        page.h1 || '–ë–µ–∑ H1',
        pageIssues.length,
        maxPriority
      ];
    });

    // –í—Å—Ç–∞–≤–∏—Ç–∏ –¥–∞–Ω—ñ
    await this.sheets.spreadsheets.values.update({
      spreadsheetId,
      range: `${sheetName}!A1:F1`,
      valueInputOption: 'RAW',
      resource: {
        values: headers
      }
    });

    if (rows.length > 0) {
      await this.sheets.spreadsheets.values.append({
        spreadsheetId,
        range: `${sheetName}!A2`,
        valueInputOption: 'RAW',
        resource: {
          values: rows
        }
      });
    }
  }

  /**
   * –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
   */
  async populateStatistics(spreadsheetId, auditData) {
    const sheetName = 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞';

    const stats = [
      ['–ú–µ—Ç—Ä–∏–∫–∞', '–ó–Ω–∞—á–µ–Ω–Ω—è'],
      [''],
      ['üåê URL —Å–∞–π—Ç—É', auditData.url],
      ['üìÖ –î–∞—Ç–∞ –∞—É–¥–∏—Ç—É', auditData.date],
      [''],
      ['üìä –ó–ê–ì–ê–õ–¨–ù–ò–ô –ë–ê–õ', `${auditData.score}/100`],
      [''],
      ['üìÑ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–æ—Ä—ñ–Ω–æ–∫', auditData.totalPages || 0],
      ['‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫', auditData.passedChecks || 0],
      [''],
      ['üéØ –ö—Ä–∏—Ç–∏—á–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏', auditData.criticalIssues || 0],
      ['‚ö†Ô∏è –í–∏—Å–æ–∫—ñ –ø—Ä–æ–±–ª–µ–º–∏', auditData.highIssues || 0],
      ['‚ÑπÔ∏è –°–µ—Ä–µ–¥–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏', auditData.mediumIssues || 0],
      ['üí° –ù–∏–∑—å–∫—ñ –ø—Ä–æ–±–ª–µ–º–∏', auditData.lowIssues || 0],
      [''],
      ['‚è±Ô∏è –ß–∞—Å —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è', this.formatDuration(auditData.duration)],
      ['üöÄ –®–≤–∏–¥–∫—ñ—Å—Ç—å', `${auditData.speed || 0} —Å—Ç–æ—Ä/—Å–µ–∫`]
    ];

    await this.sheets.spreadsheets.values.update({
      spreadsheetId,
      range: `${sheetName}!A1`,
      valueInputOption: 'RAW',
      resource: {
        values: stats
      }
    });
  }

  /**
   * –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞—Ä–∫—É—à—ñ –∑ –ø—Ä–æ–±–ª–µ–º–∞–º–∏
   */
  async populateIssueSheets(spreadsheetId, auditData) {
    const issueTypes = this.groupIssuesByType(auditData.issues || []);

    for (const [type, issues] of Object.entries(issueTypes)) {
      if (issues.length === 0) continue;

      const sheetName = this.getSheetTitle(type);

      // –ó–∞–≥–æ–ª–æ–≤–∫–∏
      const headers = [
        ['–ü—Ä–æ–±–ª–µ–º–∞', 'Severity', '–ö—ñ–ª—å–∫—ñ—Å—Ç—å URL', '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è']
      ];

      // –ì—Ä—É–ø—É–≤–∞—Ç–∏ –æ–¥–Ω–∞–∫–æ–≤—ñ –ø—Ä–æ–±–ª–µ–º–∏
      const groupedIssues = this.groupSimilarIssues(issues);

      // –î–∞–Ω—ñ
      const rows = groupedIssues.map(issue => [
        issue.message,
        issue.severity,
        issue.urls.length,
        issue.recommendation || '–ù–µ–º–∞—î —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó'
      ]);

      // –í—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏
      await this.sheets.spreadsheets.values.update({
        spreadsheetId,
        range: `${sheetName}!A1:D1`,
        valueInputOption: 'RAW',
        resource: {
          values: headers
        }
      });

      // –í—Å—Ç–∞–≤–∏—Ç–∏ –¥–∞–Ω—ñ
      if (rows.length > 0) {
        await this.sheets.spreadsheets.values.append({
          spreadsheetId,
          range: `${sheetName}!A2`,
          valueInputOption: 'RAW',
          resource: {
            values: rows
          }
        });
      }

      // –î–æ–¥–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ URL –¥–ª—è –∫–æ–∂–Ω–æ—ó –ø—Ä–æ–±–ª–µ–º–∏
      let currentRow = 2;
      for (const issue of groupedIssues) {
        if (issue.urls.length > 0) {
          const urlsData = issue.urls.map(url => [url]);
          
          await this.sheets.spreadsheets.values.update({
            spreadsheetId,
            range: `${sheetName}!E${currentRow}`,
            valueInputOption: 'RAW',
            resource: {
              values: urlsData
            }
          });
        }
        currentRow++;
      }
    }
  }

  /**
   * –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞—Ä–∫—É—à –≤—Å—ñ—Ö —Å—Ç–æ—Ä—ñ–Ω–æ–∫
   */
  async populateAllPages(spreadsheetId, auditData) {
    const sheetName = 'üìÑ –í—Å—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏';

    // –ó–∞–≥–æ–ª–æ–≤–∫–∏
    const headers = [
      ['URL', 'Status', 'Title', 'Description', 'H1', 'Canonical', '–ü—Ä–æ–±–ª–µ–º–∏']
    ];

    // –î–∞–Ω—ñ
    const rows = (auditData.pages || []).map(page => {
      const pageIssues = (auditData.issues || []).filter(issue =>
        issue.urls && issue.urls.includes(page.url)
      );

      return [
        page.url,
        page.statusCode || 'N/A',
        page.title || '',
        page.description || '',
        page.h1 || '',
        page.canonical || '',
        pageIssues.length
      ];
    });

    // –í—Å—Ç–∞–≤–∏—Ç–∏ –¥–∞–Ω—ñ
    await this.sheets.spreadsheets.values.update({
      spreadsheetId,
      range: `${sheetName}!A1:G1`,
      valueInputOption: 'RAW',
      resource: {
        values: headers
      }
    });

    if (rows.length > 0) {
      await this.sheets.spreadsheets.values.append({
        spreadsheetId,
        range: `${sheetName}!A2`,
        valueInputOption: 'RAW',
        resource: {
          values: rows
        }
      });
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç—É–≤–∞—Ç–∏ —Ç–∞–±–ª–∏—Ü—é
   */
  async formatSpreadsheet(spreadsheetId, auditData) {
    const requests = [];

    // –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∞—Ä–∫—É—à—ñ
    const spreadsheet = await this.sheets.spreadsheets.get({
      spreadsheetId
    });

    const sheets = spreadsheet.data.sheets;

    // –§–æ—Ä–º–∞—Ç—É–≤–∞—Ç–∏ –∫–æ–∂–µ–Ω –∞—Ä–∫—É—à
    for (const sheet of sheets) {
      const sheetId = sheet.properties.sheetId;

      // –ñ–∏—Ä–Ω–∏–π —à—Ä–∏—Ñ—Ç –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ (–ø–µ—Ä—à–∏–π —Ä—è–¥–æ–∫)
      requests.push({
        repeatCell: {
          range: {
            sheetId: sheetId,
            startRowIndex: 0,
            endRowIndex: 1
          },
          cell: {
            userEnteredFormat: {
              backgroundColor: { red: 0.2, green: 0.5, blue: 0.8 },
              textFormat: {
                bold: true,
                foregroundColor: { red: 1, green: 1, blue: 1 }
              }
            }
          },
          fields: 'userEnteredFormat(backgroundColor,textFormat)'
        }
      });

      // –ê–≤—Ç–æ—Ñ—ñ–ª—å—Ç—Ä
      requests.push({
        setBasicFilter: {
          filter: {
            range: {
              sheetId: sheetId,
              startRowIndex: 0
            }
          }
        }
      });

      // –ó–∞–º–æ—Ä–æ–∑–∏—Ç–∏ –ø–µ—Ä—à–∏–π —Ä—è–¥–æ–∫
      requests.push({
        updateSheetProperties: {
          properties: {
            sheetId: sheetId,
            gridProperties: {
              frozenRowCount: 1
            }
          },
          fields: 'gridProperties.frozenRowCount'
        }
      });

      // –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
      requests.push({
        autoResizeDimensions: {
          dimensions: {
            sheetId: sheetId,
            dimension: 'COLUMNS',
            startIndex: 0,
            endIndex: 10
          }
        }
      });
    }

    // –í–∏–∫–æ–Ω–∞—Ç–∏ –≤—Å—ñ –∑–∞–ø–∏—Ç–∏
    if (requests.length > 0) {
      await this.sheets.spreadsheets.batchUpdate({
        spreadsheetId,
        resource: { requests }
      });
    }
  }

  /**
   * –ì—Ä—É–ø—É–≤–∞—Ç–∏ —Å—Ö–æ–∂—ñ –ø—Ä–æ–±–ª–µ–º–∏
   */
  groupSimilarIssues(issues) {
    const grouped = {};

    for (const issue of issues) {
      const key = `${issue.message}_${issue.severity}`;
      
      if (!grouped[key]) {
        grouped[key] = {
          message: issue.message,
          severity: issue.severity,
          recommendation: issue.recommendation,
          urls: []
        };
      }

      if (issue.urls) {
        grouped[key].urls.push(...issue.urls);
      }
    }

    return Object.values(grouped);
  }

  /**
   * –û—Ç—Ä–∏–º–∞—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –∑ –ø—Ä–æ–±–ª–µ–º
   */
  getMaxPriority(issues) {
    if (issues.length === 0) return 'OK';

    const priorities = issues.map(i => i.severity);
    
    if (priorities.includes('CRITICAL')) return 'CRITICAL';
    if (priorities.includes('HIGH')) return 'HIGH';
    if (priorities.includes('MEDIUM')) return 'MEDIUM';
    if (priorities.includes('LOW')) return 'LOW';
    
    return 'OK';
  }

  /**
   * –§–æ—Ä–º–∞—Ç—É–≤–∞—Ç–∏ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å
   */
  formatDuration(ms) {
    if (!ms) return 'N/A';

    const seconds = Math.floor(ms / 1000);
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;

    if (minutes > 0) {
      return `${minutes}—Ö–≤ ${remainingSeconds}—Å`;
    }
    return `${seconds}—Å`;
  }
}

// ============================================
// –ï–ö–°–ü–û–†–¢
// ============================================

module.exports = { GoogleSheetsExporter };