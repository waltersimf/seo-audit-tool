// ============================================
// GOOGLE-AUTH.JS - Google OAuth 2.0
// ============================================
// –í–µ—Ä—Å—ñ—è: v0.7.0
// –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Google
// ============================================

const { google } = require('googleapis');
const open = require('open');
const http = require('http');
const url = require('url');
const fs = require('fs').promises;
const path = require('path');

// ============================================
// –ö–û–ù–°–¢–ê–ù–¢–ò
// ============================================

const SCOPES = [
  'https://www.googleapis.com/auth/docs',
  'https://www.googleapis.com/auth/spreadsheets',
  'https://www.googleapis.com/auth/drive.file'
];

const TOKEN_PATH = path.join(process.cwd(), 'google-token.json');
const REDIRECT_URI = 'http://localhost:3000/oauth2callback';

// ============================================
// GOOGLE AUTH –ö–õ–ê–°
// ============================================

class GoogleAuth {
  constructor() {
    this.oauth2Client = null;
    this.credentials = null;
  }

  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è OAuth2 –∫–ª—ñ—î–Ω—Ç–∞
   */
  async initialize() {
    // TODO: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–∞—î —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ü—ñ credentials –≤ Google Cloud Console
    // –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –±—É–¥—É—Ç—å –≤ README.md
    this.credentials = {
      client_id: process.env.GOOGLE_CLIENT_ID || 'YOUR_CLIENT_ID',
      client_secret: process.env.GOOGLE_CLIENT_SECRET || 'YOUR_CLIENT_SECRET',
      redirect_uris: [REDIRECT_URI]
    };

    const { client_id, client_secret, redirect_uris } = this.credentials;

    this.oauth2Client = new google.auth.OAuth2(
      client_id,
      client_secret,
      redirect_uris[0]
    );

    // –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —Ç–æ–∫–µ–Ω
    await this.loadSavedToken();
  }

  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —Ç–æ–∫–µ–Ω
   */
  async loadSavedToken() {
    try {
      const token = await fs.readFile(TOKEN_PATH, 'utf8');
      this.oauth2Client.setCredentials(JSON.parse(token));
      console.log('‚úÖ –¢–æ–∫–µ–Ω –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ —Ñ–∞–π–ª—É');
      return true;
    } catch (error) {
      console.log('‚ÑπÔ∏è –¢–æ–∫–µ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø–æ—Ç—Ä—ñ–±–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è');
      return false;
    }
  }

  /**
   * –ó–±–µ—Ä–µ–≥—Ç–∏ —Ç–æ–∫–µ–Ω
   */
  async saveToken(tokens) {
    await fs.writeFile(TOKEN_PATH, JSON.stringify(tokens));
    console.log('‚úÖ –¢–æ–∫–µ–Ω –∑–±–µ—Ä–µ–∂–µ–Ω–æ');
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —î –∞–∫—Ç–∏–≤–Ω–∏–π —Ç–æ–∫–µ–Ω
   */
  isAuthorized() {
    if (!this.oauth2Client) {
      return false;
    }

    const credentials = this.oauth2Client.credentials;
    if (!credentials || !credentials.access_token) {
      return false;
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —Ç–æ–∫–µ–Ω –Ω–µ –ø—Ä–æ—Ç–µ—Ä–º—ñ–Ω–æ–≤–∞–Ω–∏–π
    if (credentials.expiry_date && credentials.expiry_date < Date.now()) {
      return false;
    }

    return true;
  }

  /**
   * –ê–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   */
  async authorize() {
    if (!this.oauth2Client) {
      await this.initialize();
    }

    // –Ø–∫—â–æ –≤–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ - –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞
    if (this.isAuthorized()) {
      console.log('‚úÖ –í–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ');
      return this.oauth2Client;
    }

    // –°—Ç–≤–æ—Ä–∏—Ç–∏ authorization URL
    const authUrl = this.oauth2Client.generateAuthUrl({
      access_type: 'offline',
      scope: SCOPES,
      prompt: 'consent' // –ó–∞–≤–∂–¥–∏ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ consent screen –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è refresh token
    });

    console.log('üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è Google...');
    console.log('üìÑ –í—ñ–¥–∫—Ä–∏–≤–∞—é –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó...');

    // –°—Ç–≤–æ—Ä–∏—Ç–∏ –ª–æ–∫–∞–ª—å–Ω–∏–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è callback
    const code = await this.getAuthorizationCode(authUrl);

    // –û–±–º—ñ–Ω—è—Ç–∏ –∫–æ–¥ –Ω–∞ —Ç–æ–∫–µ–Ω–∏
    const { tokens } = await this.oauth2Client.getToken(code);
    this.oauth2Client.setCredentials(tokens);

    // –ó–±–µ—Ä–µ–≥—Ç–∏ —Ç–æ–∫–µ–Ω–∏
    await this.saveToken(tokens);

    console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!');
    return this.oauth2Client;
  }

  /**
   * –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω–∏–π —Å–µ—Ä–≤–µ—Ä
   */
  async getAuthorizationCode(authUrl) {
    return new Promise((resolve, reject) => {
      const server = http.createServer(async (req, res) => {
        try {
          const queryParams = url.parse(req.url, true).query;

          if (queryParams.code) {
            res.writeHead(200, { 'Content-Type': 'text/html; charset=utf-8' });
            res.end(`
              <!DOCTYPE html>
              <html>
              <head>
                <meta charset="UTF-8">
                <title>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞</title>
                <style>
                  body {
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    height: 100vh;
                    margin: 0;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                  }
                  .card {
                    background: white;
                    padding: 40px;
                    border-radius: 10px;
                    box-shadow: 0 10px 40px rgba(0,0,0,0.2);
                    text-align: center;
                    max-width: 400px;
                  }
                  h1 {
                    color: #4CAF50;
                    margin: 0 0 20px 0;
                  }
                  p {
                    color: #666;
                    margin: 10px 0;
                  }
                  .close-info {
                    margin-top: 20px;
                    font-size: 14px;
                    color: #999;
                  }
                </style>
              </head>
              <body>
                <div class="card">
                  <h1>‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!</h1>
                  <p>–í–∏ —É—Å–ø—ñ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞–ª–∏—Å—è –≤ Google Account.</p>
                  <p>–¢–µ–ø–µ—Ä –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä–∏—Ç–∏ —Ü–µ –≤—ñ–∫–Ω–æ —ñ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ø—Ä–æ–≥—Ä–∞–º–∏.</p>
                  <div class="close-info">
                    –¶–µ –≤—ñ–∫–Ω–æ –º–æ–∂–Ω–∞ –∑–∞–∫—Ä–∏—Ç–∏
                  </div>
                </div>
                <script>
                  setTimeout(() => window.close(), 3000);
                </script>
              </body>
              </html>
            `);

            server.close();
            resolve(queryParams.code);
          } else if (queryParams.error) {
            res.writeHead(400, { 'Content-Type': 'text/html; charset=utf-8' });
            res.end(`
              <!DOCTYPE html>
              <html>
              <head>
                <meta charset="UTF-8">
                <title>–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó</title>
                <style>
                  body {
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    height: 100vh;
                    margin: 0;
                    background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
                  }
                  .card {
                    background: white;
                    padding: 40px;
                    border-radius: 10px;
                    box-shadow: 0 10px 40px rgba(0,0,0,0.2);
                    text-align: center;
                    max-width: 400px;
                  }
                  h1 {
                    color: #f44336;
                    margin: 0 0 20px 0;
                  }
                  p {
                    color: #666;
                    margin: 10px 0;
                  }
                </style>
              </head>
              <body>
                <div class="card">
                  <h1>‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó</h1>
                  <p>${queryParams.error}</p>
                  <p>–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –≤ –ø—Ä–æ–≥—Ä–∞–º—ñ.</p>
                </div>
              </body>
              </html>
            `);

            server.close();
            reject(new Error(queryParams.error));
          }
        } catch (error) {
          server.close();
          reject(error);
        }
      });

      server.listen(3000, () => {
        console.log('üåê –õ–æ–∫–∞–ª—å–Ω–∏–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ http://localhost:3000');
        
        // –í—ñ–¥–∫—Ä–∏—Ç–∏ –±—Ä–∞—É–∑–µ—Ä
        open(authUrl).catch((error) => {
          console.error('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ –±—Ä–∞—É–∑–µ—Ä:', error.message);
          console.log('üìÑ –í—ñ–¥–∫—Ä–∏–π—Ç–µ —Ü–µ–π URL –≤—Ä—É—á–Ω—É:', authUrl);
        });
      });

      // Timeout —á–µ—Ä–µ–∑ 5 —Ö–≤–∏–ª–∏–Ω
      setTimeout(() => {
        server.close();
        reject(new Error('Timeout: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ 5 —Ö–≤–∏–ª–∏–Ω'));
      }, 5 * 60 * 1000);
    });
  }

  /**
   * –û—Ç—Ä–∏–º–∞—Ç–∏ OAuth2 –∫–ª—ñ—î–Ω—Ç–∞
   */
  async getClient() {
    if (!this.isAuthorized()) {
      await this.authorize();
    }

    return this.oauth2Client;
  }

  /**
   * –í–∏–π—Ç–∏ (–≤–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–∫–µ–Ω)
   */
  async logout() {
    try {
      await fs.unlink(TOKEN_PATH);
      this.oauth2Client = null;
      console.log('‚úÖ –í–∏–π—à–ª–∏ –∑ Google Account');
      return true;
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏—Ö–æ–¥—É:', error.message);
      return false;
    }
  }

  /**
   * –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   */
  async getUserInfo() {
    if (!this.isAuthorized()) {
      throw new Error('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ. –°–ø–æ—á–∞—Ç–∫—É –≤–∏–∫–ª–∏—á—Ç–µ authorize()');
    }

    try {
      const oauth2 = google.oauth2({
        auth: this.oauth2Client,
        version: 'v2'
      });

      const { data } = await oauth2.userinfo.get();

      return {
        email: data.email,
        name: data.name,
        picture: data.picture
      };
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó:', error.message);
      throw error;
    }
  }
}

// ============================================
// –ï–ö–°–ü–û–†–¢
// ============================================

module.exports = { GoogleAuth };