// ============================================
// GOOGLE-AUTH.JS - Google OAuth 2.0
// ============================================
// –í–µ—Ä—Å—ñ—è: v0.7.0 (–ü—ñ–¥—Ö—ñ–¥ 2 - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ credentials)
// –§—É–Ω–∫—Ü—ñ—ó: OAuth –∞–≤—Ç–æ—Ä—ñ–∑–∞—Ü—ñ—è, —Ç–æ–∫–µ–Ω–∏
// ============================================

const { google } = require('googleapis');
const { shell } = require('electron');
const http = require('http');
const url = require('url');
const fs = require('fs').promises;
const path = require('path');

// ============================================
// –®–õ–Ø–•–ò –î–û –§–ê–ô–õ–Ü–í
// ============================================

const CONFIG_PATH = path.join(__dirname, '../../google-config.json');
const TOKEN_PATH = path.join(__dirname, '../../google-tokens.json');
const REDIRECT_URI = 'http://localhost:3000/oauth2callback';

const SCOPES = [
  'https://www.googleapis.com/auth/docs',
  'https://www.googleapis.com/auth/spreadsheets',
  'https://www.googleapis.com/auth/drive.file'
];

// ============================================
// GOOGLE AUTH CLASS
// ============================================

class GoogleAuth {
  constructor() {
    this.oauth2Client = null;
    this.authenticated = false;
    this.userEmail = null;
    this.credentials = null; // Client ID —Ç–∞ Secret
  }

  // ============================================
  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è credentials –∑ —Ñ–∞–π–ª—É
  // ============================================
  
  async loadCredentials() {
    try {
      const configData = await fs.readFile(CONFIG_PATH, 'utf8');
      this.credentials = JSON.parse(configData);
      
      if (!this.credentials.clientId || !this.credentials.clientSecret) {
        console.log('‚ö†Ô∏è Credentials –Ω–µ –ø–æ–≤–Ω—ñ');
        return false;
      }
      
      console.log('‚úÖ Google credentials –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
      return true;
    } catch (error) {
      if (error.code === 'ENOENT') {
        console.log('‚ÑπÔ∏è –§–∞–π–ª google-config.json –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
      } else {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è credentials:', error);
      }
      return false;
    }
  }

  // ============================================
  // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è credentials –≤ —Ñ–∞–π–ª
  // ============================================
  
  async saveCredentials(clientId, clientSecret) {
    try {
      const config = {
        clientId: clientId.trim(),
        clientSecret: clientSecret.trim(),
        redirectUri: REDIRECT_URI
      };
      
      await fs.writeFile(CONFIG_PATH, JSON.stringify(config, null, 2));
      this.credentials = config;
      
      console.log('üíæ Google credentials –∑–±–µ—Ä–µ–∂–µ–Ω–æ');
      return { success: true };
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è credentials:', error);
      return { 
        success: false, 
        error: error.message 
      };
    }
  }

  // ============================================
  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ credentials
  // ============================================
  
  async checkCredentials() {
    const hasCredentials = await this.loadCredentials();
    return {
      configured: hasCredentials,
      clientId: hasCredentials ? this.credentials.clientId : null
    };
  }

  // ============================================
  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è OAuth –∫–ª—ñ—î–Ω—Ç–∞
  // ============================================
  
  async initOAuthClient() {
    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ credentials —è–∫—â–æ —â–µ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ
    if (!this.credentials) {
      const loaded = await this.loadCredentials();
      if (!loaded) {
        throw new Error('Google credentials –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å Client ID —Ç–∞ Client Secret –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö.');
      }
    }

    if (!this.oauth2Client) {
      this.oauth2Client = new google.auth.OAuth2(
        this.credentials.clientId,
        this.credentials.clientSecret,
        REDIRECT_URI
      );
    }
    
    return this.oauth2Client;
  }

  // ============================================
  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î –∑–±–µ—Ä–µ–∂–µ–Ω—ñ —Ç–æ–∫–µ–Ω–∏
  // ============================================
  
  async loadSavedTokens() {
    try {
      // –°–ø–æ—á–∞—Ç–∫—É –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ credentials
      const hasCredentials = await this.loadCredentials();
      if (!hasCredentials) {
        return false;
      }

      // –ü–æ—Ç—ñ–º —Ç–æ–∫–µ–Ω–∏
      const tokensData = await fs.readFile(TOKEN_PATH, 'utf8');
      const tokens = JSON.parse(tokensData);
      
      await this.initOAuthClient();
      this.oauth2Client.setCredentials(tokens);
      
      // –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —Ç–æ–∫–µ–Ω –≤–∞–ª—ñ–¥–Ω–∏–π
      const isValid = await this.validateToken();
      
      if (isValid) {
        this.authenticated = true;
        await this.getUserEmail();
        console.log('‚úÖ Google —Ç–æ–∫–µ–Ω–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
        return true;
      } else {
        console.log('‚ö†Ô∏è –¢–æ–∫–µ–Ω–∏ –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ, –ø–æ—Ç—Ä—ñ–±–Ω–∞ —Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è');
        return false;
      }
    } catch (error) {
      console.log('‚ÑπÔ∏è –ó–±–µ—Ä–µ–∂–µ–Ω–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤ –Ω–µ–º–∞—î');
      return false;
    }
  }

  // ============================================
  // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–æ–∫–µ–Ω–∞
  // ============================================
  
  async validateToken() {
    try {
      const oauth2 = google.oauth2({
        auth: this.oauth2Client,
        version: 'v2'
      });
      
      await oauth2.userinfo.get();
      return true;
    } catch (error) {
      console.error('‚ùå –¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π:', error.message);
      return false;
    }
  }

  // ============================================
  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è email –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  // ============================================
  
  async getUserEmail() {
    try {
      const oauth2 = google.oauth2({
        auth: this.oauth2Client,
        version: 'v2'
      });
      
      const { data } = await oauth2.userinfo.get();
      this.userEmail = data.email;
      return data.email;
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è email:', error.message);
      return null;
    }
  }

  // ============================================
  // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è (–≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –±—Ä–∞—É–∑–µ—Ä–∞)
  // ============================================
  
  async authorize() {
    return new Promise(async (resolve, reject) => {
      try {
        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ OAuth –∫–ª—ñ—î–Ω—Ç–∞ (–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç—å credentials)
        await this.initOAuthClient();

        // –ì–µ–Ω–µ—Ä—É—î–º–æ URL –¥–ª—è –∞–≤—Ç–æ—Ä—ñ–∑–∞—Ü—ñ—ó
        const authUrl = this.oauth2Client.generateAuthUrl({
          access_type: 'offline',
          scope: SCOPES,
          prompt: 'consent'
        });

        console.log('üîê –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó...');
        
        // –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –±—Ä–∞—É–∑–µ—Ä
        shell.openExternal(authUrl);

        // –°—Ç–≤–æ—Ä—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è callback
        const server = http.createServer(async (req, res) => {
          try {
            const queryParams = url.parse(req.url, true).query;
            
            if (queryParams.code) {
              // –û—Ç—Ä–∏–º–∞–ª–∏ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
              console.log('‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó');

              // –í—ñ–¥–ø–æ–≤—ñ–¥—å –±—Ä–∞—É–∑–µ—Ä—É
              res.writeHead(200, { 'Content-Type': 'text/html; charset=utf-8' });
              res.end(`
                <html>
                  <head>
                    <meta charset="utf-8">
                    <title>SEO Audit Tool - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è</title>
                    <style>
                      body {
                        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                        display: flex;
                        justify-content: center;
                        align-items: center;
                        height: 100vh;
                        margin: 0;
                        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                      }
                      .container {
                        background: white;
                        padding: 40px;
                        border-radius: 20px;
                        text-align: center;
                        box-shadow: 0 20px 60px rgba(0,0,0,0.3);
                      }
                      h1 {
                        color: #667eea;
                        margin-bottom: 20px;
                      }
                      p {
                        color: #666;
                        font-size: 1.1rem;
                      }
                      .emoji {
                        font-size: 3rem;
                        margin-bottom: 20px;
                      }
                    </style>
                  </head>
                  <body>
                    <div class="container">
                      <div class="emoji">‚úÖ</div>
                      <h1>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!</h1>
                      <p>–í–∏ –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä–∏—Ç–∏ —Ü–µ –≤—ñ–∫–Ω–æ —Ç–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ø—Ä–æ–≥—Ä–∞–º–∏.</p>
                    </div>
                  </body>
                </html>
              `);

              // –û–±–º—ñ–Ω—é—î–º–æ –∫–æ–¥ –Ω–∞ —Ç–æ–∫–µ–Ω–∏
              const { tokens } = await this.oauth2Client.getToken(queryParams.code);
              this.oauth2Client.setCredentials(tokens);

              // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–æ–∫–µ–Ω–∏
              await this.saveTokens(tokens);

              // –û—Ç—Ä–∏–º—É—î–º–æ email
              await this.getUserEmail();

              this.authenticated = true;
              server.close();

              resolve({
                success: true,
                email: this.userEmail
              });
            } else if (queryParams.error) {
              // –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
              res.writeHead(200, { 'Content-Type': 'text/html; charset=utf-8' });
              res.end(`
                <html>
                  <head>
                    <meta charset="utf-8">
                    <title>SEO Audit Tool - –ü–æ–º–∏–ª–∫–∞</title>
                    <style>
                      body {
                        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                        display: flex;
                        justify-content: center;
                        align-items: center;
                        height: 100vh;
                        margin: 0;
                        background: linear-gradient(135deg, #eb3349 0%, #f45c43 100%);
                      }
                      .container {
                        background: white;
                        padding: 40px;
                        border-radius: 20px;
                        text-align: center;
                        box-shadow: 0 20px 60px rgba(0,0,0,0.3);
                      }
                      h1 {
                        color: #eb3349;
                        margin-bottom: 20px;
                      }
                      p {
                        color: #666;
                        font-size: 1.1rem;
                      }
                      .emoji {
                        font-size: 3rem;
                        margin-bottom: 20px;
                      }
                    </style>
                  </head>
                  <body>
                    <div class="container">
                      <div class="emoji">‚ùå</div>
                      <h1>–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó</h1>
                      <p>${queryParams.error}</p>
                      <p>–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.</p>
                    </div>
                  </body>
                </html>
              `);

              server.close();
              reject(new Error(queryParams.error));
            }
          } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ callback:', error);
            server.close();
            reject(error);
          }
        });

        // –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 3000
        server.listen(3000, () => {
          console.log('üåê –õ–æ–∫–∞–ª—å–Ω–∏–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ http://localhost:3000');
        });

        // –¢–∞–π–º–∞—É—Ç 5 —Ö–≤–∏–ª–∏–Ω
        setTimeout(() => {
          server.close();
          reject(new Error('–ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –≤–∏–π—à–æ–≤ (5 —Ö–≤)'));
        }, 5 * 60 * 1000);

      } catch (error) {
        reject(error);
      }
    });
  }

  // ============================================
  // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤
  // ============================================
  
  async saveTokens(tokens) {
    try {
      await fs.writeFile(TOKEN_PATH, JSON.stringify(tokens, null, 2));
      console.log('üíæ –¢–æ–∫–µ–Ω–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ:', TOKEN_PATH);
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤:', error);
      throw error;
    }
  }

  // ============================================
  // –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤ (logout)
  // ============================================
  
  async logout() {
    try {
      await fs.unlink(TOKEN_PATH);
      this.authenticated = false;
      this.userEmail = null;
      this.oauth2Client = null;
      console.log('üëã –í–∏—Ö—ñ–¥ –∑ Google Account');
      return true;
    } catch (error) {
      if (error.code === 'ENOENT') {
        this.authenticated = false;
        this.userEmail = null;
        this.oauth2Client = null;
        return true;
      }
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏—Ö–æ–¥—É:', error);
      throw error;
    }
  }

  // ============================================
  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É
  // ============================================
  
  getStatus() {
    return {
      authenticated: this.authenticated,
      email: this.userEmail
    };
  }

  // ============================================
  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è OAuth –∫–ª—ñ—î–Ω—Ç–∞
  // ============================================
  
  getAuthClient() {
    if (!this.authenticated) {
      throw new Error('–ü–æ—Ç—Ä—ñ–±–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è Google');
    }
    return this.oauth2Client;
  }
}

// ============================================
// –ï–ö–°–ü–û–†–¢
// ============================================

module.exports = { GoogleAuth };